#include <iostream>
#include <fstream>
#include <locale.h>
#include "GnuP.h"

double* slau_gaus(double** a, double* y, int n) {//функция решает СЛАУ методом гаусса и возвращает вектор решений
    double* x, max;
    int k, index;
    x = new double[n];
    k = 0;
    while (k < n) {
        // Поиск строки с максимальным a[i][k]
        max = abs(a[k][k]);
        index = k;
        for (int i = k + 1; i < n; i++)
            if (abs(a[i][k]) > max) {
                max = abs(a[i][k]);
                index = i;
            }
        // Перестановка строк
        for (int j = 0; j < n; j++) {
            double temp = a[k][j];
            a[k][j] = a[index][j];
            a[index][j] = temp;
        }
        double temp = y[k];
        y[k] = y[index];
        y[index] = temp;
        // Нормализация уравнений
        for (int i = k; i < n; i++) {
            double temp = a[i][k];
            if (abs(temp) == 0) continue; // для нулевого коэффициента пропустить
            for (int j = 0; j < n; j++)
                a[i][j] = a[i][j] / temp;
            y[i] = y[i] / temp;
            if (i == k)  continue; // уравнение не вычитать само из себя
            for (int j = 0; j < n; j++)
                a[i][j] = a[i][j] - a[k][j];
            y[i] = y[i] - y[k];
        }
        k++;
    }
    // обратная подстановка
    for (k = n - 1; k >= 0; k--) {
        x[k] = y[k];
        for (int i = 0; i < k; i++)
            y[i] = y[i] - a[i][k] * x[k];
    }
    return x;
}

int main(){
	setlocale(LC_ALL, "rus");
	ifstream f("dots.txt");
	if (f.is_open()) {//если файл читается проводим расчеты
		double* s,*p;
		int i,j,n,N;
		f >> n;//читаем количество проведеных экспериментов из файла
		f >> N;//размер будущей матрицы тоже из файла
		s = new double[n];
		p = new double[n];
		cout << "S ";
		for (i = 0; i < n; i++) {
			f >> s[i];//значения экспериментов записаны в файле, записываем их в массив
			cout << s[i] << " ";
		}
		cout << "\nP ";
		for (i = 0; i < n; i++) {
			f >> p[i];
			cout << p[i] << " ";
		}
		f.close();
        cout << endl;
        //ищем коэффиценты для функции по формуле 15.5 из файла МКМ откуда можно составить матрицу и решив СЛАУ найти коэффиценты 
		double** matrix,*vect,*koef;
		matrix = new double* [N];
		vect = new double [N];
		for (i = 0; i < N; i++) {
			matrix[i] = new double[N];
		}
		for (i = 0; i < N; i++) {
			for (j = 0; j < N; j++) {
				matrix[i][j] = 0;
				vect[i] = 0;
			}
		}
		for (i = 0; i < N; i++) {
			for (j = 0; j < N; j++) {
				for (int k = 0; k < n; k++) {
                    if (j == 1) {
                        matrix[i][j] = 0;//по условию коэффициент а1=0 отбрасываем этот вариант и зануляем
                        vect[i] += p[k] * pow(s[k], i);//считаем как отдельный вектор что записано после равно
                    }
                    else
                        matrix[i][j] += pow(s[k], i + j);//замечаем закономерность что степень х=столбцы+строки
				}
			}
		}
        koef = new double[N];
        koef = slau_gaus(matrix, vect, N);//вызывая функцию находим коэффициенты а0 а2 а3( а1 тоже, но он нам не нужен, мы уже знаем что 0)

        cout << "\nФункциональная зависимость: \n" << koef[3] <<
            "x^3+" << koef[2] << "x^2+" << koef[0]<<endl;
        //считаяем коэффициенты линии регрессии по формуле 15.3 из того же файла
        double koef_reg[2], yx = 0, y = 0, x = 0, x2 = 0;

        for (i = 0; i < n; i++) {
            yx += s[i] * p[i];
            y += p[i];
            x += s[i];
            x2 += s[i] * s[i];
        }
        koef_reg[1] = (n * yx - y * x) / (n * x2 - x * x);
        koef_reg[0] = y / n - koef_reg[1] * x / n;

        cout << "\nЛиния регрессии: \n" << koef_reg[1] <<"x+ " << koef_reg[0] << endl;
        //находим коэффициент корреляции по 15.8 из МКМ
        double koef_kor, Mx, My, chisl = 0, znam_x = 0, znam_y = 0;

        Mx = x / n;
        My = y / n;
        for (i = 0; i < n; i++) {
            chisl += (s[i] - Mx) * (p[i] - My);
            znam_x += pow(s[i] - Mx, 2);
            znam_y += pow(p[i] - My, 2);
        }
        koef_kor = chisl / sqrt(znam_x * znam_y);
        cout << "\nКоэффициент корреляции: \n" << koef_kor << endl;
        //находим суммарные ошибки по формуле из инета ибо я не нашла где-то в методичке это, да и в целом вроде эта часть кода не так нужна, но по заданию это надо
        double* p_reg, mid_err, sum_err=0;
        p_reg = new double[n];
        for (int i = 0; i < n; i++)
            p_reg[i] = koef_reg[0] + koef_reg[1] * s[i];

        for (int i = 0; i < n; i++)
            sum_err += (p[i] - p_reg[i]) * (p[i] - p_reg[i]);
        mid_err = sum_err / n;

        cout << "\nСуммарная квадратичная ошибка для линии регрессии и подобранной функции: \n" << sum_err << endl;
        cout << "Средняя ошибка для линии регрессии и подобранной функции: \n" << mid_err << endl;
        //строим графики с помощью программы которую написала дипломница Алексеева по gnuplot
        //он кидал файл в общую беседу и там надо было сделать пару установок, чтобы все хорошо работало на визуалке

        GnuP graph;
        graph.plotArrayPar(n, s, p, 3, 0, 9, "Точки");//график соединяющий точки

        double s1[100], p1[100], p2[100];//подбираем большое значение точек чтобы график был плавным
        for (int i = 0; i < 100; i++) {
            s1[i] = i/20.0;
            p1[i] = koef_reg[0] + s1[i] * koef_reg[1];//высчитываем значения у для прямой
            p2[i] = koef[0] + koef[2] * s1[i] * s1[i]+koef[3]*pow(s1[i],3);//высчитываем значения у для графика
        }
        graph.plotArrayPar(100, s1, p1, 0, 0, 2, "Линия регрессии");//строим график по точкам прямой
        graph.plotArrayPar(100, s1, p2, 0, 0, 12,"Функциональная зависимость");//строим график по точкам функций
        graph.plot();//собираем все в одном окошке

        for (i = 0; i < N; ++i)//очищаем память от всех массивов и матриц что использовали
            delete[] matrix[i];
        delete[] s,p,matrix,vect,koef,p_reg;
        system("pause");
	}
	else cout << "Файл не найден";
}
